# Problem 12
"""Highly divisible triangular number(https://projecteuler.net/problem=12)

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?"""


def triangular_number(n: int) -> int:
    if not (isinstance(n, int)) or not n >= 1:
        print(f'Invalid Type of argument - n:{type(n)} or n < 1')
        raise TypeError(
            'Incompatible types of arguments, must be integers and grater than 1 ')
    return int((n+1)/2 * n)


def list_of_divisors(n: int) -> list:
    if not (isinstance(n, int)) or not n >= 1:
        print(f'Invalid Type of argument - n:{type(n)} or n < 1')
        raise TypeError(
            'Incompatible types of arguments, must be integers and grater than 1 ')

    if n == 1:
        return [1]
    if n == 2:
        return [1, 2]
    if n == 3:
        return [1, 3]

    list_of_divisors = [1]
    max_divisor = int(n/2)

    for i in range(1, max_divisor+1):
        if n % i == 0:
            list_of_divisors.append(i)

    list_of_divisors.append(n)

    return list_of_divisors


def number_of_divisors(n: int) -> int:
    if not (isinstance(n, int)) or not n >= 1:
        print(f'Invalid Type of argument - n:{type(n)} or n < 1')
        raise TypeError(
            'Incompatible types of arguments, must be integers and grater than 1 ')

    result = 1

    divisor = 2  # search even divisors
    i = 0
    while n != 1 and n % divisor == 0:
        i += 1
        n = int(n / divisor)
    result *= (i+1)

    divisor = 3  # search odd divisors
    while n != 1:
        i = 0
        while n % divisor == 0:
            i += 1
            n = int(n / divisor)
        divisor += 2
        result *= (i+1)

    return result


def __main__():
    number_of_divsors = int(input())
    while number_of_divsors != 0:
        i = 1
        while number_of_divisors(triangular_number(i)) < number_of_divsors:
            i += 1

        print(triangular_number(i))
        number_of_divsors = int(input())


if __name__ == "__main__":
    __main__()
